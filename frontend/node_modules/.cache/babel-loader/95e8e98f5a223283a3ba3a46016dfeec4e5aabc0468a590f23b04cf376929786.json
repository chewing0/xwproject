{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport axios from 'axios';\nexport default {\n  name: 'ModuleThreeView',\n  data() {\n    return {\n      activeTab: 'nodes',\n      loading: false,\n      nodes: [],\n      relationships: [],\n      // 连接状态\n      connectionStatus: {\n        text: '未连接',\n        class: 'disconnected'\n      },\n      // 搜索和过滤\n      nodeFilter: {\n        label: '',\n        searchField: '',\n        searchValue: ''\n      },\n      // 新建节点\n      newNode: {\n        label: '',\n        properties: {\n          name: '',\n          description: '',\n          probability: '',\n          difficulty: ''\n        }\n      },\n      // 新建关系\n      newRelationship: {\n        type: '',\n        fromLabel: '',\n        toLabel: '',\n        fromNode: null,\n        toNode: null\n      },\n      // 编辑节点\n      editingNode: null,\n      originalEditingNode: null,\n      // 选项卡配置\n      tabs: [{\n        key: 'nodes',\n        label: '节点管理'\n      }, {\n        key: 'relationships',\n        label: '关系管理'\n      }, {\n        key: 'preview',\n        label: '图谱预览'\n      }]\n    };\n  },\n  computed: {\n    totalNodes() {\n      return this.nodes.length;\n    },\n    totalRelationships() {\n      return this.relationships.length;\n    }\n  },\n  mounted() {\n    this.checkConnection();\n    this.loadNodes();\n    this.loadRelationships();\n  },\n  methods: {\n    // 检查连接状态\n    async checkConnection() {\n      try {\n        const response = await this.apiCall('kg/schema/');\n        if (response.success) {\n          this.connectionStatus = {\n            text: '已连接',\n            class: 'connected'\n          };\n        } else {\n          this.connectionStatus = {\n            text: '连接异常',\n            class: 'error'\n          };\n        }\n      } catch (error) {\n        this.connectionStatus = {\n          text: '连接失败',\n          class: 'disconnected'\n        };\n      }\n    },\n    // API调用基础方法\n    async apiCall(url, method = 'GET', data = null) {\n      try {\n        const config = {\n          method,\n          url: `http://localhost:8000/api/${url}`,\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n        if (data) {\n          config.data = JSON.stringify(data);\n        }\n        const response = await axios(config);\n        return response.data;\n      } catch (error) {\n        console.error('API Error:', error);\n        this.showError(error.response?.data?.error || '请求失败');\n        throw error;\n      }\n    },\n    // 加载节点\n    async loadNodes() {\n      this.loading = true;\n      try {\n        let url = 'kg/nodes/';\n        const params = new URLSearchParams();\n        if (this.nodeFilter.label) {\n          params.append('label', this.nodeFilter.label);\n        }\n        if (this.nodeFilter.searchField && this.nodeFilter.searchValue) {\n          params.append('search_field', this.nodeFilter.searchField);\n          params.append('search_value', this.nodeFilter.searchValue);\n        }\n        if (params.toString()) {\n          url += '?' + params.toString();\n        }\n        const response = await this.apiCall(url);\n        if (response.success) {\n          this.nodes = response.data;\n        }\n      } catch (error) {\n        console.error('Failed to load nodes:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 加载关系\n    async loadRelationships() {\n      this.loading = true;\n      try {\n        const response = await this.apiCall('kg/relationships/');\n        if (response.success) {\n          this.relationships = response.data;\n        }\n      } catch (error) {\n        console.error('Failed to load relationships:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    // 创建节点\n    async createNode() {\n      if (!this.newNode.label || !this.newNode.properties.name) {\n        this.showError('请填写必要信息');\n        return;\n      }\n      try {\n        // 清理空值\n        const properties = {};\n        Object.keys(this.newNode.properties).forEach(key => {\n          if (this.newNode.properties[key] !== '') {\n            properties[key] = this.newNode.properties[key];\n          }\n        });\n        const response = await this.apiCall('kg/nodes/create/', 'POST', {\n          label: this.newNode.label,\n          properties\n        });\n        if (response.success) {\n          this.showSuccess('节点创建成功');\n          this.resetNewNode();\n          this.loadNodes();\n        }\n      } catch (error) {\n        console.error('Failed to create node:', error);\n      }\n    },\n    // 编辑节点\n    editNode(node) {\n      this.editingNode = {\n        ...node\n      };\n      this.originalEditingNode = {\n        ...node\n      };\n    },\n    // 更新节点\n    async updateNode() {\n      if (!this.editingNode.name) {\n        this.showError('节点名称不能为空');\n        return;\n      }\n      try {\n        // 获取节点标签\n        const nodeLabel = this.getNodeLabel(this.editingNode);\n\n        // 清理空值\n        const updateProperties = {};\n        Object.keys(this.editingNode).forEach(key => {\n          if (this.editingNode[key] !== '' && this.editingNode[key] !== null) {\n            updateProperties[key] = this.editingNode[key];\n          }\n        });\n        const response = await this.apiCall('kg/nodes/update/', 'PUT', {\n          label: nodeLabel,\n          match_properties: {\n            name: this.originalEditingNode.name\n          },\n          update_properties: updateProperties\n        });\n        if (response.success) {\n          this.showSuccess('节点更新成功');\n          this.closeEditModal();\n          this.loadNodes();\n        }\n      } catch (error) {\n        console.error('Failed to update node:', error);\n      }\n    },\n    // 删除节点\n    async deleteNode(node) {\n      if (!confirm(`确定要删除节点 \"${node.name}\" 吗？`)) {\n        return;\n      }\n      try {\n        const nodeLabel = this.getNodeLabel(node);\n        const response = await this.apiCall('kg/nodes/delete/', 'DELETE', {\n          label: nodeLabel,\n          properties: {\n            name: node.name\n          }\n        });\n        if (response.success) {\n          this.showSuccess('节点删除成功');\n          this.loadNodes();\n          this.loadRelationships(); // 重新加载关系，因为可能有关联关系被删除\n        }\n      } catch (error) {\n        console.error('Failed to delete node:', error);\n      }\n    },\n    // 创建关系\n    async createRelationship() {\n      if (!this.newRelationship.fromNode || !this.newRelationship.toNode) {\n        this.showError('请选择起始节点和目标节点');\n        return;\n      }\n      try {\n        const response = await this.apiCall('kg/relationships/create/', 'POST', {\n          from_label: this.newRelationship.fromLabel,\n          from_properties: {\n            name: this.newRelationship.fromNode.name\n          },\n          to_label: this.newRelationship.toLabel,\n          to_properties: {\n            name: this.newRelationship.toNode.name\n          },\n          rel_type: this.newRelationship.type,\n          rel_properties: {}\n        });\n        if (response.success) {\n          this.showSuccess('关系创建成功');\n          this.resetNewRelationship();\n          this.loadRelationships();\n        }\n      } catch (error) {\n        console.error('Failed to create relationship:', error);\n      }\n    },\n    // 删除关系\n    async deleteRelationship(relationship) {\n      if (!confirm('确定要删除这个关系吗？')) {\n        return;\n      }\n      try {\n        const fromLabel = this.getNodeLabel(relationship.a);\n        const toLabel = this.getNodeLabel(relationship.b);\n        const response = await this.apiCall('kg/relationships/delete/', 'DELETE', {\n          from_label: fromLabel,\n          from_properties: {\n            name: relationship.a.name\n          },\n          to_label: toLabel,\n          to_properties: {\n            name: relationship.b.name\n          },\n          rel_type: relationship.r.type || 'UNKNOWN'\n        });\n        if (response.success) {\n          this.showSuccess('关系删除成功');\n          this.loadRelationships();\n        }\n      } catch (error) {\n        console.error('Failed to delete relationship:', error);\n      }\n    },\n    // 工具方法\n    resetNewNode() {\n      this.newNode = {\n        label: '',\n        properties: {\n          name: '',\n          description: '',\n          probability: '',\n          difficulty: ''\n        }\n      };\n    },\n    resetNewRelationship() {\n      this.newRelationship = {\n        type: '',\n        fromLabel: '',\n        toLabel: '',\n        fromNode: null,\n        toNode: null\n      };\n    },\n    closeEditModal() {\n      this.editingNode = null;\n      this.originalEditingNode = null;\n    },\n    onRelationshipTypeChange() {\n      const typeMap = {\n        'BECAUSE': {\n          from: 'type',\n          to: 'reason'\n        },\n        'DEAL': {\n          from: 'reason',\n          to: 'solution'\n        }\n      };\n      if (this.newRelationship.type && typeMap[this.newRelationship.type]) {\n        this.newRelationship.fromLabel = typeMap[this.newRelationship.type].from;\n        this.newRelationship.toLabel = typeMap[this.newRelationship.type].to;\n        this.newRelationship.fromNode = null;\n        this.newRelationship.toNode = null;\n      }\n    },\n    getNodesForLabel(label) {\n      return this.nodes.filter(node => this.getNodeLabel(node.n) === label).map(node => node.n);\n    },\n    getNodeLabel(node) {\n      // 从节点的__labels__属性或其他方式推断标签\n      if (node.__labels__ && node.__labels__.length > 0) {\n        return node.__labels__[0];\n      }\n\n      // 根据节点属性推断\n      if (node.probability !== undefined) return 'reason';\n      if (node.difficulty !== undefined) return 'solution';\n\n      // 如果无法推断，检查节点的其他特征\n      if (Object.prototype.hasOwnProperty.call(node, 'probability')) return 'reason';\n      if (Object.prototype.hasOwnProperty.call(node, 'difficulty')) return 'solution';\n      return 'type'; // 默认为故障类型\n    },\n    getNodeTypeClass(node) {\n      const label = this.getNodeLabel(node);\n      return `node-type-${label}`;\n    },\n    getNodeTypeLabel(node) {\n      const label = this.getNodeLabel(node);\n      const labelMap = {\n        'type': '故障类型',\n        'reason': '故障原因',\n        'solution': '解决方案'\n      };\n      return labelMap[label] || '未知';\n    },\n    showSuccess(message) {\n      // 这里可以集成一个通知组件\n      alert('成功: ' + message);\n    },\n    showError(message) {\n      // 这里可以集成一个通知组件\n      alert('错误: ' + message);\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","activeTab","loading","nodes","relationships","connectionStatus","text","class","nodeFilter","label","searchField","searchValue","newNode","properties","description","probability","difficulty","newRelationship","type","fromLabel","toLabel","fromNode","toNode","editingNode","originalEditingNode","tabs","key","computed","totalNodes","length","totalRelationships","mounted","checkConnection","loadNodes","loadRelationships","methods","response","apiCall","success","error","url","method","config","headers","JSON","stringify","console","showError","params","URLSearchParams","append","toString","createNode","Object","keys","forEach","showSuccess","resetNewNode","editNode","node","updateNode","nodeLabel","getNodeLabel","updateProperties","match_properties","update_properties","closeEditModal","deleteNode","confirm","createRelationship","from_label","from_properties","to_label","to_properties","rel_type","rel_properties","resetNewRelationship","deleteRelationship","relationship","a","b","r","onRelationshipTypeChange","typeMap","from","to","getNodesForLabel","filter","n","map","__labels__","undefined","prototype","hasOwnProperty","call","getNodeTypeClass","getNodeTypeLabel","labelMap","message","alert"],"sources":["D:\\wby\\projectfiles\\xwproject\\frontend\\src\\views\\Module3.vue"],"sourcesContent":["<template>  <div class=\"module\">\r\n    <div class=\"module-header\">\r\n      <h1>知识图谱管理</h1>\r\n      <div class=\"connection-status\" :class=\"connectionStatus.class\">\r\n        <span class=\"status-dot\"></span>\r\n        {{ connectionStatus.text }}\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- 操作选项卡 -->\r\n    <div class=\"tabs\">\r\n      <button \r\n        v-for=\"tab in tabs\" \r\n        :key=\"tab.key\"\r\n        :class=\"['tab-button', { active: activeTab === tab.key }]\"\r\n        @click=\"activeTab = tab.key\"\r\n      >\r\n        {{ tab.label }}\r\n      </button>\r\n    </div>\r\n\r\n    <!-- 节点管理 -->\r\n    <div v-if=\"activeTab === 'nodes'\" class=\"content\">\r\n      <div class=\"operations-panel\">\r\n        <h3>节点操作</h3>\r\n        \r\n        <!-- 搜索区域 -->\r\n        <div class=\"search-section\">\r\n          <div class=\"form-group\">\r\n            <label>节点类型:</label>\r\n            <select v-model=\"nodeFilter.label\">\r\n              <option value=\"\">全部</option>\r\n              <option value=\"type\">故障类型</option>\r\n              <option value=\"reason\">故障原因</option>\r\n              <option value=\"solution\">解决方案</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>搜索字段:</label>\r\n            <input v-model=\"nodeFilter.searchField\" placeholder=\"如: name\">\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>搜索值:</label>\r\n            <input v-model=\"nodeFilter.searchValue\" placeholder=\"搜索内容\">\r\n          </div>\r\n          <button @click=\"loadNodes\" class=\"btn btn-primary\">搜索节点</button>\r\n        </div>\r\n\r\n        <!-- 创建节点区域 -->\r\n        <div class=\"create-section\">\r\n          <h4>创建新节点</h4>\r\n          <div class=\"form-group\">\r\n            <label>节点类型:</label>\r\n            <select v-model=\"newNode.label\" required>\r\n              <option value=\"\">请选择</option>\r\n              <option value=\"type\">故障类型</option>\r\n              <option value=\"reason\">故障原因</option>\r\n              <option value=\"solution\">解决方案</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>名称:</label>\r\n            <input v-model=\"newNode.properties.name\" required placeholder=\"节点名称\">\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>描述:</label>\r\n            <textarea v-model=\"newNode.properties.description\" placeholder=\"节点描述\"></textarea>\r\n          </div>\r\n          <div v-if=\"newNode.label === 'reason'\" class=\"form-group\">\r\n            <label>概率:</label>\r\n            <input v-model=\"newNode.properties.probability\" type=\"number\" step=\"0.1\" min=\"0\" max=\"1\" placeholder=\"0.0-1.0\">\r\n          </div>\r\n          <div v-if=\"newNode.label === 'solution'\" class=\"form-group\">\r\n            <label>难度:</label>\r\n            <select v-model=\"newNode.properties.difficulty\">\r\n              <option value=\"\">请选择</option>\r\n              <option value=\"easy\">简单</option>\r\n              <option value=\"medium\">中等</option>\r\n              <option value=\"hard\">困难</option>\r\n            </select>\r\n          </div>\r\n          <button @click=\"createNode\" :disabled=\"!newNode.label || !newNode.properties.name\" class=\"btn btn-success\">创建节点</button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 节点列表 -->\r\n      <div class=\"nodes-list\">\r\n        <h4>节点列表 ({{ nodes.length }} 个)</h4>\r\n        <div v-if=\"loading\" class=\"loading\">加载中...</div>\r\n        <div v-else-if=\"nodes.length === 0\" class=\"no-data\">暂无数据</div>\r\n        <div v-else class=\"node-cards\">\r\n          <div v-for=\"(node, index) in nodes\" :key=\"index\" class=\"node-card\">\r\n            <div class=\"node-header\">\r\n              <span class=\"node-type\" :class=\"getNodeTypeClass(node.n)\">{{ getNodeTypeLabel(node.n) }}</span>\r\n              <div class=\"node-actions\">\r\n                <button @click=\"editNode(node.n)\" class=\"btn btn-sm btn-warning\">编辑</button>\r\n                <button @click=\"deleteNode(node.n)\" class=\"btn btn-sm btn-danger\">删除</button>\r\n              </div>\r\n            </div>\r\n            <div class=\"node-content\">\r\n              <h5>{{ node.n.name }}</h5>\r\n              <p v-if=\"node.n.description\">{{ node.n.description }}</p>\r\n              <div v-if=\"node.n.probability\" class=\"node-meta\">概率: {{ node.n.probability }}</div>\r\n              <div v-if=\"node.n.difficulty\" class=\"node-meta\">难度: {{ node.n.difficulty }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 关系管理 -->\r\n    <div v-if=\"activeTab === 'relationships'\" class=\"content\">\r\n      <div class=\"operations-panel\">\r\n        <h3>关系操作</h3>\r\n        \r\n        <!-- 创建关系区域 -->\r\n        <div class=\"create-section\">\r\n          <h4>创建新关系</h4>\r\n          <div class=\"form-group\">\r\n            <label>关系类型:</label>\r\n            <select v-model=\"newRelationship.type\" @change=\"onRelationshipTypeChange\">\r\n              <option value=\"\">请选择</option>\r\n              <option value=\"BECAUSE\">故障类型 → 故障原因</option>\r\n              <option value=\"DEAL\">故障原因 → 解决方案</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div v-if=\"newRelationship.type\" class=\"relationship-nodes\">\r\n            <div class=\"form-group\">\r\n              <label>起始节点 ({{ newRelationship.fromLabel }}):</label>\r\n              <select v-model=\"newRelationship.fromNode\">\r\n                <option value=\"\">请选择</option>\r\n                <option v-for=\"node in getNodesForLabel(newRelationship.fromLabel)\" :key=\"node.id\" :value=\"node\">\r\n                  {{ node.name }}\r\n                </option>\r\n              </select>\r\n            </div>\r\n            \r\n            <div class=\"form-group\">\r\n              <label>目标节点 ({{ newRelationship.toLabel }}):</label>\r\n              <select v-model=\"newRelationship.toNode\">\r\n                <option value=\"\">请选择</option>\r\n                <option v-for=\"node in getNodesForLabel(newRelationship.toLabel)\" :key=\"node.id\" :value=\"node\">\r\n                  {{ node.name }}\r\n                </option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          \r\n          <button @click=\"createRelationship\" \r\n                  :disabled=\"!newRelationship.fromNode || !newRelationship.toNode\" \r\n                  class=\"btn btn-success\">创建关系</button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 关系列表 -->\r\n      <div class=\"relationships-list\">\r\n        <h4>关系列表 ({{ relationships.length }} 个)</h4>\r\n        <button @click=\"loadRelationships\" class=\"btn btn-primary\">刷新关系</button>\r\n        \r\n        <div v-if=\"loading\" class=\"loading\">加载中...</div>\r\n        <div v-else-if=\"relationships.length === 0\" class=\"no-data\">暂无数据</div>\r\n        <div v-else class=\"relationship-cards\">\r\n          <div v-for=\"(rel, index) in relationships\" :key=\"index\" class=\"relationship-card\">\r\n            <div class=\"relationship-flow\">\r\n              <div class=\"relationship-node start\">\r\n                <span class=\"node-type\" :class=\"getNodeTypeClass(rel.a)\">{{ getNodeTypeLabel(rel.a) }}</span>\r\n                <span class=\"node-name\">{{ rel.a.name }}</span>\r\n              </div>\r\n              <div class=\"relationship-arrow\">\r\n                <span class=\"arrow\">→</span>\r\n                <span class=\"relationship-type\">{{ rel.r.type || 'UNKNOWN' }}</span>\r\n              </div>\r\n              <div class=\"relationship-node end\">\r\n                <span class=\"node-type\" :class=\"getNodeTypeClass(rel.b)\">{{ getNodeTypeLabel(rel.b) }}</span>\r\n                <span class=\"node-name\">{{ rel.b.name }}</span>\r\n              </div>\r\n              <div class=\"relationship-actions\">\r\n                <button @click=\"deleteRelationship(rel)\" class=\"btn btn-sm btn-danger\">删除</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 图谱预览 -->\r\n    <div v-if=\"activeTab === 'preview'\" class=\"content\">\r\n      <h3>知识图谱预览</h3>\r\n      <div class=\"graph-preview\">\r\n        <p>这里可以展示知识图谱的可视化内容</p>\r\n        <p>节点总数: {{ totalNodes }}</p>\r\n        <p>关系总数: {{ totalRelationships }}</p>\r\n        \r\n        <div class=\"schema-info\">\r\n          <h4>图谱架构</h4>\r\n          <div class=\"schema-section\">\r\n            <h5>节点类型</h5>\r\n            <ul>\r\n              <li><strong>type (故障类型)</strong>: 描述各种故障类型</li>\r\n              <li><strong>reason (故障原因)</strong>: 描述故障产生的原因</li>\r\n              <li><strong>solution (解决方案)</strong>: 描述解决故障的方法</li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"schema-section\">\r\n            <h5>关系类型</h5>\r\n            <ul>\r\n              <li><strong>BECAUSE</strong>: 故障类型 → 故障原因</li>\r\n              <li><strong>DEAL</strong>: 故障原因 → 解决方案</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- 编辑节点模态框 -->\r\n    <div v-if=\"editingNode\" class=\"modal-overlay\" @click=\"closeEditModal\">\r\n      <div class=\"modal\" @click.stop>\r\n        <div class=\"modal-header\">\r\n          <h3>编辑节点</h3>\r\n          <button @click=\"closeEditModal\" class=\"btn btn-sm btn-secondary\">×</button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group\">\r\n            <label>名称:</label>\r\n            <input v-model=\"editingNode.name\" required>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label>描述:</label>\r\n            <textarea v-model=\"editingNode.description\"></textarea>\r\n          </div>\r\n          <div v-if=\"editingNode.probability !== undefined\" class=\"form-group\">\r\n            <label>概率:</label>\r\n            <input v-model=\"editingNode.probability\" type=\"number\" step=\"0.1\" min=\"0\" max=\"1\">\r\n          </div>\r\n          <div v-if=\"editingNode.difficulty !== undefined\" class=\"form-group\">\r\n            <label>难度:</label>\r\n            <select v-model=\"editingNode.difficulty\">\r\n              <option value=\"\">请选择</option>\r\n              <option value=\"easy\">简单</option>\r\n              <option value=\"medium\">中等</option>\r\n              <option value=\"hard\">困难</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button @click=\"updateNode\" class=\"btn btn-primary\">保存</button>\r\n          <button @click=\"closeEditModal\" class=\"btn btn-secondary\">取消</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\n\r\nexport default {\r\n  name: 'ModuleThreeView',  data() {\r\n    return {\r\n      activeTab: 'nodes',\r\n      loading: false,\r\n      nodes: [],\r\n      relationships: [],\r\n      \r\n      // 连接状态\r\n      connectionStatus: {\r\n        text: '未连接',\r\n        class: 'disconnected'\r\n      },\r\n      \r\n      // 搜索和过滤\r\n      nodeFilter: {\r\n        label: '',\r\n        searchField: '',\r\n        searchValue: ''\r\n      },\r\n      \r\n      // 新建节点\r\n      newNode: {\r\n        label: '',\r\n        properties: {\r\n          name: '',\r\n          description: '',\r\n          probability: '',\r\n          difficulty: ''\r\n        }\r\n      },\r\n      \r\n      // 新建关系\r\n      newRelationship: {\r\n        type: '',\r\n        fromLabel: '',\r\n        toLabel: '',\r\n        fromNode: null,\r\n        toNode: null\r\n      },\r\n      \r\n      // 编辑节点\r\n      editingNode: null,\r\n      originalEditingNode: null,\r\n      \r\n      // 选项卡配置\r\n      tabs: [\r\n        { key: 'nodes', label: '节点管理' },\r\n        { key: 'relationships', label: '关系管理' },\r\n        { key: 'preview', label: '图谱预览' }\r\n      ]\r\n    }\r\n  },\r\n  \r\n  computed: {\r\n    totalNodes() {\r\n      return this.nodes.length\r\n    },\r\n    \r\n    totalRelationships() {\r\n      return this.relationships.length\r\n    }\r\n  },\r\n    mounted() {\r\n    this.checkConnection()\r\n    this.loadNodes()\r\n    this.loadRelationships()\r\n  },\r\n    methods: {\r\n    // 检查连接状态\r\n    async checkConnection() {\r\n      try {\r\n        const response = await this.apiCall('kg/schema/')\r\n        if (response.success) {\r\n          this.connectionStatus = {\r\n            text: '已连接',\r\n            class: 'connected'\r\n          }\r\n        } else {\r\n          this.connectionStatus = {\r\n            text: '连接异常',\r\n            class: 'error'\r\n          }\r\n        }\r\n      } catch (error) {\r\n        this.connectionStatus = {\r\n          text: '连接失败',\r\n          class: 'disconnected'\r\n        }\r\n      }\r\n    },\r\n    \r\n    // API调用基础方法\r\n    async apiCall(url, method = 'GET', data = null) {\r\n      try {\r\n        const config = {\r\n          method,\r\n          url: `http://localhost:8000/api/${url}`,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n        \r\n        if (data) {\r\n          config.data = JSON.stringify(data)\r\n        }\r\n        \r\n        const response = await axios(config)\r\n        return response.data\r\n      } catch (error) {\r\n        console.error('API Error:', error)\r\n        this.showError(error.response?.data?.error || '请求失败')\r\n        throw error\r\n      }\r\n    },\r\n    \r\n    // 加载节点\r\n    async loadNodes() {\r\n      this.loading = true\r\n      try {\r\n        let url = 'kg/nodes/'\r\n        const params = new URLSearchParams()\r\n        \r\n        if (this.nodeFilter.label) {\r\n          params.append('label', this.nodeFilter.label)\r\n        }\r\n        if (this.nodeFilter.searchField && this.nodeFilter.searchValue) {\r\n          params.append('search_field', this.nodeFilter.searchField)\r\n          params.append('search_value', this.nodeFilter.searchValue)\r\n        }\r\n        \r\n        if (params.toString()) {\r\n          url += '?' + params.toString()\r\n        }\r\n        \r\n        const response = await this.apiCall(url)\r\n        if (response.success) {\r\n          this.nodes = response.data\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load nodes:', error)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    // 加载关系\r\n    async loadRelationships() {\r\n      this.loading = true\r\n      try {\r\n        const response = await this.apiCall('kg/relationships/')\r\n        if (response.success) {\r\n          this.relationships = response.data\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to load relationships:', error)\r\n      } finally {\r\n        this.loading = false\r\n      }\r\n    },\r\n    \r\n    // 创建节点\r\n    async createNode() {\r\n      if (!this.newNode.label || !this.newNode.properties.name) {\r\n        this.showError('请填写必要信息')\r\n        return\r\n      }\r\n      \r\n      try {\r\n        // 清理空值\r\n        const properties = {}\r\n        Object.keys(this.newNode.properties).forEach(key => {\r\n          if (this.newNode.properties[key] !== '') {\r\n            properties[key] = this.newNode.properties[key]\r\n          }\r\n        })\r\n        \r\n        const response = await this.apiCall('kg/nodes/create/', 'POST', {\r\n          label: this.newNode.label,\r\n          properties\r\n        })\r\n        \r\n        if (response.success) {\r\n          this.showSuccess('节点创建成功')\r\n          this.resetNewNode()\r\n          this.loadNodes()\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to create node:', error)\r\n      }\r\n    },\r\n    \r\n    // 编辑节点\r\n    editNode(node) {\r\n      this.editingNode = { ...node }\r\n      this.originalEditingNode = { ...node }\r\n    },\r\n    \r\n    // 更新节点\r\n    async updateNode() {\r\n      if (!this.editingNode.name) {\r\n        this.showError('节点名称不能为空')\r\n        return\r\n      }\r\n      \r\n      try {\r\n        // 获取节点标签\r\n        const nodeLabel = this.getNodeLabel(this.editingNode)\r\n        \r\n        // 清理空值\r\n        const updateProperties = {}\r\n        Object.keys(this.editingNode).forEach(key => {\r\n          if (this.editingNode[key] !== '' && this.editingNode[key] !== null) {\r\n            updateProperties[key] = this.editingNode[key]\r\n          }\r\n        })\r\n        \r\n        const response = await this.apiCall('kg/nodes/update/', 'PUT', {\r\n          label: nodeLabel,\r\n          match_properties: { name: this.originalEditingNode.name },\r\n          update_properties: updateProperties\r\n        })\r\n        \r\n        if (response.success) {\r\n          this.showSuccess('节点更新成功')\r\n          this.closeEditModal()\r\n          this.loadNodes()\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to update node:', error)\r\n      }\r\n    },\r\n    \r\n    // 删除节点\r\n    async deleteNode(node) {\r\n      if (!confirm(`确定要删除节点 \"${node.name}\" 吗？`)) {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const nodeLabel = this.getNodeLabel(node)\r\n        const response = await this.apiCall('kg/nodes/delete/', 'DELETE', {\r\n          label: nodeLabel,\r\n          properties: { name: node.name }\r\n        })\r\n        \r\n        if (response.success) {\r\n          this.showSuccess('节点删除成功')\r\n          this.loadNodes()\r\n          this.loadRelationships() // 重新加载关系，因为可能有关联关系被删除\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to delete node:', error)\r\n      }\r\n    },\r\n    \r\n    // 创建关系\r\n    async createRelationship() {\r\n      if (!this.newRelationship.fromNode || !this.newRelationship.toNode) {\r\n        this.showError('请选择起始节点和目标节点')\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const response = await this.apiCall('kg/relationships/create/', 'POST', {\r\n          from_label: this.newRelationship.fromLabel,\r\n          from_properties: { name: this.newRelationship.fromNode.name },\r\n          to_label: this.newRelationship.toLabel,\r\n          to_properties: { name: this.newRelationship.toNode.name },\r\n          rel_type: this.newRelationship.type,\r\n          rel_properties: {}\r\n        })\r\n        \r\n        if (response.success) {\r\n          this.showSuccess('关系创建成功')\r\n          this.resetNewRelationship()\r\n          this.loadRelationships()\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to create relationship:', error)\r\n      }\r\n    },\r\n    \r\n    // 删除关系\r\n    async deleteRelationship(relationship) {\r\n      if (!confirm('确定要删除这个关系吗？')) {\r\n        return\r\n      }\r\n      \r\n      try {\r\n        const fromLabel = this.getNodeLabel(relationship.a)\r\n        const toLabel = this.getNodeLabel(relationship.b)\r\n        \r\n        const response = await this.apiCall('kg/relationships/delete/', 'DELETE', {\r\n          from_label: fromLabel,\r\n          from_properties: { name: relationship.a.name },\r\n          to_label: toLabel,\r\n          to_properties: { name: relationship.b.name },\r\n          rel_type: relationship.r.type || 'UNKNOWN'\r\n        })\r\n        \r\n        if (response.success) {\r\n          this.showSuccess('关系删除成功')\r\n          this.loadRelationships()\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to delete relationship:', error)\r\n      }\r\n    },\r\n    \r\n    // 工具方法\r\n    resetNewNode() {\r\n      this.newNode = {\r\n        label: '',\r\n        properties: {\r\n          name: '',\r\n          description: '',\r\n          probability: '',\r\n          difficulty: ''\r\n        }\r\n      }\r\n    },\r\n    \r\n    resetNewRelationship() {\r\n      this.newRelationship = {\r\n        type: '',\r\n        fromLabel: '',\r\n        toLabel: '',\r\n        fromNode: null,\r\n        toNode: null\r\n      }\r\n    },\r\n    \r\n    closeEditModal() {\r\n      this.editingNode = null\r\n      this.originalEditingNode = null\r\n    },\r\n    \r\n    onRelationshipTypeChange() {\r\n      const typeMap = {\r\n        'BECAUSE': { from: 'type', to: 'reason' },\r\n        'DEAL': { from: 'reason', to: 'solution' }\r\n      }\r\n      \r\n      if (this.newRelationship.type && typeMap[this.newRelationship.type]) {\r\n        this.newRelationship.fromLabel = typeMap[this.newRelationship.type].from\r\n        this.newRelationship.toLabel = typeMap[this.newRelationship.type].to\r\n        this.newRelationship.fromNode = null\r\n        this.newRelationship.toNode = null\r\n      }\r\n    },\r\n    \r\n    getNodesForLabel(label) {\r\n      return this.nodes\r\n        .filter(node => this.getNodeLabel(node.n) === label)\r\n        .map(node => node.n)\r\n    },    getNodeLabel(node) {\r\n      // 从节点的__labels__属性或其他方式推断标签\r\n      if (node.__labels__ && node.__labels__.length > 0) {\r\n        return node.__labels__[0]\r\n      }\r\n      \r\n      // 根据节点属性推断\r\n      if (node.probability !== undefined) return 'reason'\r\n      if (node.difficulty !== undefined) return 'solution'\r\n      \r\n      // 如果无法推断，检查节点的其他特征\r\n      if (Object.prototype.hasOwnProperty.call(node, 'probability')) return 'reason'\r\n      if (Object.prototype.hasOwnProperty.call(node, 'difficulty')) return 'solution'\r\n      \r\n      return 'type' // 默认为故障类型\r\n    },\r\n    \r\n    getNodeTypeClass(node) {\r\n      const label = this.getNodeLabel(node)\r\n      return `node-type-${label}`\r\n    },\r\n    \r\n    getNodeTypeLabel(node) {\r\n      const label = this.getNodeLabel(node)\r\n      const labelMap = {\r\n        'type': '故障类型',\r\n        'reason': '故障原因',\r\n        'solution': '解决方案'\r\n      }\r\n      return labelMap[label] || '未知'\r\n    },\r\n    \r\n    showSuccess(message) {\r\n      // 这里可以集成一个通知组件\r\n      alert('成功: ' + message)\r\n    },\r\n    \r\n    showError(message) {\r\n      // 这里可以集成一个通知组件\r\n      alert('错误: ' + message)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.module {\r\n  padding: 2rem;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n}\r\n\r\n/* 选项卡样式 */\r\n.tabs {\r\n  display: flex;\r\n  border-bottom: 2px solid #e1e5e9;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.tab-button {\r\n  padding: 0.75rem 1.5rem;\r\n  border: none;\r\n  background: none;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  color: #6c757d;\r\n  border-bottom: 2px solid transparent;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.tab-button:hover {\r\n  color: #007bff;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.tab-button.active {\r\n  color: #007bff;\r\n  border-bottom-color: #007bff;\r\n  font-weight: 600;\r\n}\r\n\r\n/* 内容区域 */\r\n.content {\r\n  margin-top: 2rem;\r\n}\r\n\r\n/* 操作面板 */\r\n.operations-panel {\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  padding: 1.5rem;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.operations-panel h3 {\r\n  margin: 0 0 1.5rem 0;\r\n  color: #495057;\r\n}\r\n\r\n.operations-panel h4 {\r\n  margin: 2rem 0 1rem 0;\r\n  color: #6c757d;\r\n  border-top: 1px solid #dee2e6;\r\n  padding-top: 1rem;\r\n}\r\n\r\n.operations-panel h4:first-child {\r\n  margin-top: 0;\r\n  border-top: none;\r\n  padding-top: 0;\r\n}\r\n\r\n/* 搜索区域 */\r\n.search-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 1rem;\r\n  align-items: end;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n/* 创建区域 */\r\n.create-section {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 1rem;\r\n  align-items: end;\r\n}\r\n\r\n/* 表单组件 */\r\n.form-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.form-group label {\r\n  font-weight: 600;\r\n  margin-bottom: 0.5rem;\r\n  color: #495057;\r\n}\r\n\r\n.form-group input,\r\n.form-group select,\r\n.form-group textarea {\r\n  padding: 0.5rem;\r\n  border: 1px solid #ced4da;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n  transition: border-color 0.3s ease;\r\n}\r\n\r\n.form-group input:focus,\r\n.form-group select:focus,\r\n.form-group textarea:focus {\r\n  outline: none;\r\n  border-color: #007bff;\r\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\r\n}\r\n\r\n.form-group textarea {\r\n  resize: vertical;\r\n  min-height: 80px;\r\n}\r\n\r\n/* 按钮样式 */\r\n.btn {\r\n  padding: 0.5rem 1rem;\r\n  border: none;\r\n  border-radius: 4px;\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  text-align: center;\r\n}\r\n\r\n.btn:disabled {\r\n  opacity: 0.6;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.btn-primary {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.btn-primary:hover:not(:disabled) {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.btn-success {\r\n  background-color: #28a745;\r\n  color: white;\r\n}\r\n\r\n.btn-success:hover:not(:disabled) {\r\n  background-color: #1e7e34;\r\n}\r\n\r\n.btn-warning {\r\n  background-color: #ffc107;\r\n  color: #212529;\r\n}\r\n\r\n.btn-warning:hover:not(:disabled) {\r\n  background-color: #e0a800;\r\n}\r\n\r\n.btn-danger {\r\n  background-color: #dc3545;\r\n  color: white;\r\n}\r\n\r\n.btn-danger:hover:not(:disabled) {\r\n  background-color: #c82333;\r\n}\r\n\r\n.btn-secondary {\r\n  background-color: #6c757d;\r\n  color: white;\r\n}\r\n\r\n.btn-secondary:hover:not(:disabled) {\r\n  background-color: #545b62;\r\n}\r\n\r\n.btn-sm {\r\n  padding: 0.25rem 0.5rem;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n/* 节点列表 */\r\n.nodes-list h4,\r\n.relationships-list h4 {\r\n  color: #495057;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.loading,\r\n.no-data {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  color: #6c757d;\r\n  font-style: italic;\r\n}\r\n\r\n/* 节点卡片 */\r\n.node-cards {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 1rem;\r\n}\r\n\r\n.node-card {\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.node-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.node-header {\r\n  background: #f8f9fa;\r\n  padding: 0.75rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid #dee2e6;\r\n}\r\n\r\n.node-type {\r\n  padding: 0.25rem 0.5rem;\r\n  border-radius: 4px;\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.node-type-type {\r\n  background-color: #e3f2fd;\r\n  color: #1976d2;\r\n}\r\n\r\n.node-type-reason {\r\n  background-color: #fff3e0;\r\n  color: #f57c00;\r\n}\r\n\r\n.node-type-solution {\r\n  background-color: #e8f5e8;\r\n  color: #388e3c;\r\n}\r\n\r\n.node-actions {\r\n  display: flex;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.node-content {\r\n  padding: 1rem;\r\n}\r\n\r\n.node-content h5 {\r\n  margin: 0 0 0.5rem 0;\r\n  color: #495057;\r\n}\r\n\r\n.node-content p {\r\n  margin: 0.5rem 0;\r\n  color: #6c757d;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.node-meta {\r\n  font-size: 0.8rem;\r\n  color: #6c757d;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n/* 关系列表 */\r\n.relationship-cards {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.relationship-card {\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  background: white;\r\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\r\n}\r\n\r\n.relationship-card:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.relationship-flow {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.relationship-node {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  min-width: 120px;\r\n}\r\n\r\n.relationship-node .node-name {\r\n  font-weight: 600;\r\n  color: #495057;\r\n  margin-top: 0.25rem;\r\n  text-align: center;\r\n}\r\n\r\n.relationship-arrow {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: #6c757d;\r\n}\r\n\r\n.relationship-arrow .arrow {\r\n  font-size: 1.5rem;\r\n  color: #007bff;\r\n}\r\n\r\n.relationship-arrow .relationship-type {\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  margin-top: 0.25rem;\r\n}\r\n\r\n.relationship-actions {\r\n  margin-left: auto;\r\n}\r\n\r\n/* 关系节点选择 */\r\n.relationship-nodes {\r\n  grid-column: 1 / -1;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 1rem;\r\n}\r\n\r\n/* 图谱预览 */\r\n.graph-preview {\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.schema-info {\r\n  margin-top: 2rem;\r\n  text-align: left;\r\n}\r\n\r\n.schema-section {\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.schema-section h5 {\r\n  color: #495057;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.schema-section ul {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.schema-section li {\r\n  padding: 0.5rem;\r\n  background: white;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 4px;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n/* 模态框 */\r\n.modal-overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.modal {\r\n  background: white;\r\n  border-radius: 8px;\r\n  width: 90%;\r\n  max-width: 500px;\r\n  max-height: 90vh;\r\n  overflow-y: auto;\r\n}\r\n\r\n.modal-header {\r\n  padding: 1rem 1.5rem;\r\n  border-bottom: 1px solid #dee2e6;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.modal-header h3 {\r\n  margin: 0;\r\n  color: #495057;\r\n}\r\n\r\n.modal-body {\r\n  padding: 1.5rem;\r\n}\r\n\r\n.modal-footer {\r\n  padding: 1rem 1.5rem;\r\n  border-top: 1px solid #dee2e6;\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  justify-content: flex-end;\r\n}\r\n\r\n/* 响应式设计 */\r\n@media (max-width: 768px) {\r\n  .module {\r\n    padding: 1rem;\r\n  }\r\n  \r\n  .search-section,\r\n  .create-section {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .relationship-nodes {\r\n    grid-template-columns: 1fr;\r\n  }\r\n  \r\n  .relationship-flow {\r\n    flex-direction: column;\r\n    text-align: center;\r\n  }\r\n  \r\n  .relationship-arrow .arrow {\r\n    transform: rotate(90deg);\r\n  }\r\n  \r\n  .node-cards {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}